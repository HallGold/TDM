//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

signx_service_signdata_args = function(args) {
  this.session = null;
  this.con_url = null;
  this.b64data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_url !== undefined && args.con_url !== null) {
      this.con_url = args.con_url;
    }
    if (args.b64data !== undefined && args.b64data !== null) {
      this.b64data = args.b64data;
    }
  }
};
signx_service_signdata_args.prototype = {};
signx_service_signdata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_signdata_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_signdata_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_url !== null && this.con_url !== undefined) {
    output.writeFieldBegin('con_url', Thrift.Type.STRING, 2);
    output.writeString(this.con_url);
    output.writeFieldEnd();
  }
  if (this.b64data !== null && this.b64data !== undefined) {
    output.writeFieldBegin('b64data', Thrift.Type.STRING, 3);
    output.writeString(this.b64data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_signdata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_signdata_result.prototype = {};
signx_service_signdata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_signdata_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_signdata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_verify_signdata_args = function(args) {
  this.session = null;
  this.con_url = null;
  this.b64_src_data = null;
  this.b64_signed_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_url !== undefined && args.con_url !== null) {
      this.con_url = args.con_url;
    }
    if (args.b64_src_data !== undefined && args.b64_src_data !== null) {
      this.b64_src_data = args.b64_src_data;
    }
    if (args.b64_signed_data !== undefined && args.b64_signed_data !== null) {
      this.b64_signed_data = args.b64_signed_data;
    }
  }
};
signx_service_verify_signdata_args.prototype = {};
signx_service_verify_signdata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64_src_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64_signed_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_verify_signdata_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_verify_signdata_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_url !== null && this.con_url !== undefined) {
    output.writeFieldBegin('con_url', Thrift.Type.STRING, 2);
    output.writeString(this.con_url);
    output.writeFieldEnd();
  }
  if (this.b64_src_data !== null && this.b64_src_data !== undefined) {
    output.writeFieldBegin('b64_src_data', Thrift.Type.STRING, 3);
    output.writeString(this.b64_src_data);
    output.writeFieldEnd();
  }
  if (this.b64_signed_data !== null && this.b64_signed_data !== undefined) {
    output.writeFieldBegin('b64_signed_data', Thrift.Type.STRING, 4);
    output.writeString(this.b64_signed_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_verify_signdata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_verify_signdata_result.prototype = {};
signx_service_verify_signdata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_verify_signdata_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_verify_signdata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_signmessage_args = function(args) {
  this.session = null;
  this.con_url = null;
  this.b64data = null;
  this.attach_origin_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_url !== undefined && args.con_url !== null) {
      this.con_url = args.con_url;
    }
    if (args.b64data !== undefined && args.b64data !== null) {
      this.b64data = args.b64data;
    }
    if (args.attach_origin_data !== undefined && args.attach_origin_data !== null) {
      this.attach_origin_data = args.attach_origin_data;
    }
  }
};
signx_service_signmessage_args.prototype = {};
signx_service_signmessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.attach_origin_data = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_signmessage_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_signmessage_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_url !== null && this.con_url !== undefined) {
    output.writeFieldBegin('con_url', Thrift.Type.STRING, 2);
    output.writeString(this.con_url);
    output.writeFieldEnd();
  }
  if (this.b64data !== null && this.b64data !== undefined) {
    output.writeFieldBegin('b64data', Thrift.Type.STRING, 3);
    output.writeString(this.b64data);
    output.writeFieldEnd();
  }
  if (this.attach_origin_data !== null && this.attach_origin_data !== undefined) {
    output.writeFieldBegin('attach_origin_data', Thrift.Type.I32, 4);
    output.writeI32(this.attach_origin_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_signmessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_signmessage_result.prototype = {};
signx_service_signmessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_signmessage_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_signmessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_verify_message_args = function(args) {
  this.session = null;
  this.con_url = null;
  this.b64_src_data = null;
  this.b64_signed_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_url !== undefined && args.con_url !== null) {
      this.con_url = args.con_url;
    }
    if (args.b64_src_data !== undefined && args.b64_src_data !== null) {
      this.b64_src_data = args.b64_src_data;
    }
    if (args.b64_signed_data !== undefined && args.b64_signed_data !== null) {
      this.b64_signed_data = args.b64_signed_data;
    }
  }
};
signx_service_verify_message_args.prototype = {};
signx_service_verify_message_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64_src_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64_signed_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_verify_message_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_verify_message_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_url !== null && this.con_url !== undefined) {
    output.writeFieldBegin('con_url', Thrift.Type.STRING, 2);
    output.writeString(this.con_url);
    output.writeFieldEnd();
  }
  if (this.b64_src_data !== null && this.b64_src_data !== undefined) {
    output.writeFieldBegin('b64_src_data', Thrift.Type.STRING, 3);
    output.writeString(this.b64_src_data);
    output.writeFieldEnd();
  }
  if (this.b64_signed_data !== null && this.b64_signed_data !== undefined) {
    output.writeFieldBegin('b64_signed_data', Thrift.Type.STRING, 4);
    output.writeString(this.b64_signed_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_verify_message_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_verify_message_result.prototype = {};
signx_service_verify_message_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_verify_message_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_verify_message_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccsigndata_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64eccpriblob = null;
  this.b64orgdata = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64eccpriblob !== undefined && args.b64eccpriblob !== null) {
      this.b64eccpriblob = args.b64eccpriblob;
    }
    if (args.b64orgdata !== undefined && args.b64orgdata !== null) {
      this.b64orgdata = args.b64orgdata;
    }
  }
};
signx_service_ext_eccsigndata_args.prototype = {};
signx_service_ext_eccsigndata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64eccpriblob = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64orgdata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccsigndata_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccsigndata_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64eccpriblob !== null && this.b64eccpriblob !== undefined) {
    output.writeFieldBegin('b64eccpriblob', Thrift.Type.STRING, 3);
    output.writeString(this.b64eccpriblob);
    output.writeFieldEnd();
  }
  if (this.b64orgdata !== null && this.b64orgdata !== undefined) {
    output.writeFieldBegin('b64orgdata', Thrift.Type.STRING, 4);
    output.writeString(this.b64orgdata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccsigndata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_ext_eccsigndata_result.prototype = {};
signx_service_ext_eccsigndata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccsigndata_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccsigndata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccverify_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64eccpubblob = null;
  this.b64orgdata = null;
  this.b64signed_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64eccpubblob !== undefined && args.b64eccpubblob !== null) {
      this.b64eccpubblob = args.b64eccpubblob;
    }
    if (args.b64orgdata !== undefined && args.b64orgdata !== null) {
      this.b64orgdata = args.b64orgdata;
    }
    if (args.b64signed_data !== undefined && args.b64signed_data !== null) {
      this.b64signed_data = args.b64signed_data;
    }
  }
};
signx_service_ext_eccverify_args.prototype = {};
signx_service_ext_eccverify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64eccpubblob = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64orgdata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.b64signed_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccverify_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccverify_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64eccpubblob !== null && this.b64eccpubblob !== undefined) {
    output.writeFieldBegin('b64eccpubblob', Thrift.Type.STRING, 3);
    output.writeString(this.b64eccpubblob);
    output.writeFieldEnd();
  }
  if (this.b64orgdata !== null && this.b64orgdata !== undefined) {
    output.writeFieldBegin('b64orgdata', Thrift.Type.STRING, 4);
    output.writeString(this.b64orgdata);
    output.writeFieldEnd();
  }
  if (this.b64signed_data !== null && this.b64signed_data !== undefined) {
    output.writeFieldBegin('b64signed_data', Thrift.Type.STRING, 5);
    output.writeString(this.b64signed_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccverify_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_ext_eccverify_result.prototype = {};
signx_service_ext_eccverify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccverify_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccverify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccverify_ex_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64ecccertblob = null;
  this.b64orgdata = null;
  this.b64signed_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64ecccertblob !== undefined && args.b64ecccertblob !== null) {
      this.b64ecccertblob = args.b64ecccertblob;
    }
    if (args.b64orgdata !== undefined && args.b64orgdata !== null) {
      this.b64orgdata = args.b64orgdata;
    }
    if (args.b64signed_data !== undefined && args.b64signed_data !== null) {
      this.b64signed_data = args.b64signed_data;
    }
  }
};
signx_service_ext_eccverify_ex_args.prototype = {};
signx_service_ext_eccverify_ex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64ecccertblob = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64orgdata = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.b64signed_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccverify_ex_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccverify_ex_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64ecccertblob !== null && this.b64ecccertblob !== undefined) {
    output.writeFieldBegin('b64ecccertblob', Thrift.Type.STRING, 3);
    output.writeString(this.b64ecccertblob);
    output.writeFieldEnd();
  }
  if (this.b64orgdata !== null && this.b64orgdata !== undefined) {
    output.writeFieldBegin('b64orgdata', Thrift.Type.STRING, 4);
    output.writeString(this.b64orgdata);
    output.writeFieldEnd();
  }
  if (this.b64signed_data !== null && this.b64signed_data !== undefined) {
    output.writeFieldBegin('b64signed_data', Thrift.Type.STRING, 5);
    output.writeString(this.b64signed_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_ext_eccverify_ex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_ext_eccverify_ex_result.prototype = {};
signx_service_ext_eccverify_ex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_ext_eccverify_ex_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_ext_eccverify_ex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_regist_args = function(args) {
};
signx_service_regist_args.prototype = {};
signx_service_regist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_regist_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_regist_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_regist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_regist_result.prototype = {};
signx_service_regist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_regist_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_regist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_unregist_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
signx_service_unregist_args.prototype = {};
signx_service_unregist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_unregist_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_unregist_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_unregist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_unregist_result.prototype = {};
signx_service_unregist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_unregist_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_unregist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_login_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.pwd = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
  }
};
signx_service_login_args.prototype = {};
signx_service_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_login_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_login_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_login_result.prototype = {};
signx_service_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_login_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_logout_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
signx_service_logout_args.prototype = {};
signx_service_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_logout_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_logout_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_logout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_logout_result.prototype = {};
signx_service_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_logout_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_islogined_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
signx_service_islogined_args.prototype = {};
signx_service_islogined_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_islogined_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_islogined_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_islogined_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_islogined_result.prototype = {};
signx_service_islogined_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_islogined_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_islogined_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_getb64cert_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.purpose = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.purpose !== undefined && args.purpose !== null) {
      this.purpose = args.purpose;
    }
  }
};
signx_service_getb64cert_args.prototype = {};
signx_service_getb64cert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.purpose = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_getb64cert_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_getb64cert_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.I32, 3);
    output.writeI32(this.purpose);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_getb64cert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_getb64cert_result.prototype = {};
signx_service_getb64cert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_getb64cert_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_getb64cert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_dupb64cert_with_template_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.purpose = null;
  this.cert_type = null;
  this.bits = null;
  this.cert_template = null;
  this.x509_extension = null;
  this.hash_method = null;
  this.reserve = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.purpose !== undefined && args.purpose !== null) {
      this.purpose = args.purpose;
    }
    if (args.cert_type !== undefined && args.cert_type !== null) {
      this.cert_type = args.cert_type;
    }
    if (args.bits !== undefined && args.bits !== null) {
      this.bits = args.bits;
    }
    if (args.cert_template !== undefined && args.cert_template !== null) {
      this.cert_template = args.cert_template;
    }
    if (args.x509_extension !== undefined && args.x509_extension !== null) {
      this.x509_extension = args.x509_extension;
    }
    if (args.hash_method !== undefined && args.hash_method !== null) {
      this.hash_method = args.hash_method;
    }
    if (args.reserve !== undefined && args.reserve !== null) {
      this.reserve = args.reserve;
    }
  }
};
signx_service_dupb64cert_with_template_args.prototype = {};
signx_service_dupb64cert_with_template_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.purpose = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.cert_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bits = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cert_template = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.x509_extension = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.hash_method = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.reserve = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_dupb64cert_with_template_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_dupb64cert_with_template_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.I32, 3);
    output.writeI32(this.purpose);
    output.writeFieldEnd();
  }
  if (this.cert_type !== null && this.cert_type !== undefined) {
    output.writeFieldBegin('cert_type', Thrift.Type.I32, 4);
    output.writeI32(this.cert_type);
    output.writeFieldEnd();
  }
  if (this.bits !== null && this.bits !== undefined) {
    output.writeFieldBegin('bits', Thrift.Type.I32, 5);
    output.writeI32(this.bits);
    output.writeFieldEnd();
  }
  if (this.cert_template !== null && this.cert_template !== undefined) {
    output.writeFieldBegin('cert_template', Thrift.Type.STRING, 6);
    output.writeString(this.cert_template);
    output.writeFieldEnd();
  }
  if (this.x509_extension !== null && this.x509_extension !== undefined) {
    output.writeFieldBegin('x509_extension', Thrift.Type.STRING, 7);
    output.writeString(this.x509_extension);
    output.writeFieldEnd();
  }
  if (this.hash_method !== null && this.hash_method !== undefined) {
    output.writeFieldBegin('hash_method', Thrift.Type.I32, 8);
    output.writeI32(this.hash_method);
    output.writeFieldEnd();
  }
  if (this.reserve !== null && this.reserve !== undefined) {
    output.writeFieldBegin('reserve', Thrift.Type.STRING, 9);
    output.writeString(this.reserve);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_dupb64cert_with_template_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_dupb64cert_with_template_result.prototype = {};
signx_service_dupb64cert_with_template_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_dupb64cert_with_template_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_dupb64cert_with_template_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_get_all_con_uri_args = function(args) {
  this.session = null;
  this.cert_flag_bits = null;
  this.split = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.cert_flag_bits !== undefined && args.cert_flag_bits !== null) {
      this.cert_flag_bits = args.cert_flag_bits;
    }
    if (args.split !== undefined && args.split !== null) {
      this.split = args.split;
    }
  }
};
signx_service_get_all_con_uri_args.prototype = {};
signx_service_get_all_con_uri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cert_flag_bits = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.split = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_get_all_con_uri_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_get_all_con_uri_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.cert_flag_bits !== null && this.cert_flag_bits !== undefined) {
    output.writeFieldBegin('cert_flag_bits', Thrift.Type.I32, 2);
    output.writeI32(this.cert_flag_bits);
    output.writeFieldEnd();
  }
  if (this.split !== null && this.split !== undefined) {
    output.writeFieldBegin('split', Thrift.Type.STRING, 3);
    output.writeString(this.split);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_get_all_con_uri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_get_all_con_uri_result.prototype = {};
signx_service_get_all_con_uri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_get_all_con_uri_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_get_all_con_uri_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_finger_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.wrapper = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.wrapper !== undefined && args.wrapper !== null) {
      this.wrapper = args.wrapper;
    }
  }
};
signx_service_finger_args.prototype = {};
signx_service_finger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.wrapper = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_finger_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_finger_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.wrapper !== null && this.wrapper !== undefined) {
    output.writeFieldBegin('wrapper', Thrift.Type.STRING, 3);
    output.writeString(this.wrapper);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_finger_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_finger_result.prototype = {};
signx_service_finger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_finger_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_finger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_command_args = function(args) {
  this.session = null;
  this.any_uri = null;
  this.json_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.any_uri !== undefined && args.any_uri !== null) {
      this.any_uri = args.any_uri;
    }
    if (args.json_data !== undefined && args.json_data !== null) {
      this.json_data = args.json_data;
    }
  }
};
signx_service_command_args.prototype = {};
signx_service_command_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.any_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.json_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_command_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_command_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.any_uri !== null && this.any_uri !== undefined) {
    output.writeFieldBegin('any_uri', Thrift.Type.STRING, 2);
    output.writeString(this.any_uri);
    output.writeFieldEnd();
  }
  if (this.json_data !== null && this.json_data !== undefined) {
    output.writeFieldBegin('json_data', Thrift.Type.STRING, 3);
    output.writeString(this.json_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_command_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_command_result.prototype = {};
signx_service_command_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_command_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_command_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_version_args = function(args) {
};
signx_service_version_args.prototype = {};
signx_service_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_version_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_version_result.prototype = {};
signx_service_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_version_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_upgrade_args = function(args) {
  this.b64data = null;
  if (args) {
    if (args.b64data !== undefined && args.b64data !== null) {
      this.b64data = args.b64data;
    }
  }
};
signx_service_upgrade_args.prototype = {};
signx_service_upgrade_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.b64data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_upgrade_args.prototype.write = function(output) {
  output.writeStructBegin('signx_service_upgrade_args');
  if (this.b64data !== null && this.b64data !== undefined) {
    output.writeFieldBegin('b64data', Thrift.Type.STRING, 1);
    output.writeString(this.b64data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_service_upgrade_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
signx_service_upgrade_result.prototype = {};
signx_service_upgrade_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

signx_service_upgrade_result.prototype.write = function(output) {
  output.writeStructBegin('signx_service_upgrade_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

signx_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
signx_serviceClient.prototype = {};
signx_serviceClient.prototype.signdata = function(session, con_url, b64data, callback) {
  this.send_signdata(session, con_url, b64data, callback); 
  if (!callback) {
    return this.recv_signdata();
  }
};

signx_serviceClient.prototype.send_signdata = function(session, con_url, b64data, callback) {
  this.output.writeMessageBegin('signdata', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_url: con_url,
    b64data: b64data
  };
  var args = new signx_service_signdata_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_signdata();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_signdata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_signdata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'signdata failed: unknown result';
};
signx_serviceClient.prototype.verify_signdata = function(session, con_url, b64_src_data, b64_signed_data, callback) {
  this.send_verify_signdata(session, con_url, b64_src_data, b64_signed_data, callback); 
  if (!callback) {
    return this.recv_verify_signdata();
  }
};

signx_serviceClient.prototype.send_verify_signdata = function(session, con_url, b64_src_data, b64_signed_data, callback) {
  this.output.writeMessageBegin('verify_signdata', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_url: con_url,
    b64_src_data: b64_src_data,
    b64_signed_data: b64_signed_data
  };
  var args = new signx_service_verify_signdata_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verify_signdata();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_verify_signdata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_verify_signdata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'verify_signdata failed: unknown result';
};
signx_serviceClient.prototype.signmessage = function(session, con_url, b64data, attach_origin_data, callback) {
  this.send_signmessage(session, con_url, b64data, attach_origin_data, callback); 
  if (!callback) {
    return this.recv_signmessage();
  }
};

signx_serviceClient.prototype.send_signmessage = function(session, con_url, b64data, attach_origin_data, callback) {
  this.output.writeMessageBegin('signmessage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_url: con_url,
    b64data: b64data,
    attach_origin_data: attach_origin_data
  };
  var args = new signx_service_signmessage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_signmessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_signmessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_signmessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'signmessage failed: unknown result';
};
signx_serviceClient.prototype.verify_message = function(session, con_url, b64_src_data, b64_signed_data, callback) {
  this.send_verify_message(session, con_url, b64_src_data, b64_signed_data, callback); 
  if (!callback) {
    return this.recv_verify_message();
  }
};

signx_serviceClient.prototype.send_verify_message = function(session, con_url, b64_src_data, b64_signed_data, callback) {
  this.output.writeMessageBegin('verify_message', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_url: con_url,
    b64_src_data: b64_src_data,
    b64_signed_data: b64_signed_data
  };
  var args = new signx_service_verify_message_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_verify_message();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_verify_message = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_verify_message_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'verify_message failed: unknown result';
};
signx_serviceClient.prototype.ext_eccsigndata = function(session, con_uri, b64eccpriblob, b64orgdata, callback) {
  this.send_ext_eccsigndata(session, con_uri, b64eccpriblob, b64orgdata, callback); 
  if (!callback) {
    return this.recv_ext_eccsigndata();
  }
};

signx_serviceClient.prototype.send_ext_eccsigndata = function(session, con_uri, b64eccpriblob, b64orgdata, callback) {
  this.output.writeMessageBegin('ext_eccsigndata', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64eccpriblob: b64eccpriblob,
    b64orgdata: b64orgdata
  };
  var args = new signx_service_ext_eccsigndata_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ext_eccsigndata();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_ext_eccsigndata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_ext_eccsigndata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ext_eccsigndata failed: unknown result';
};
signx_serviceClient.prototype.ext_eccverify = function(session, con_uri, b64eccpubblob, b64orgdata, b64signed_data, callback) {
  this.send_ext_eccverify(session, con_uri, b64eccpubblob, b64orgdata, b64signed_data, callback); 
  if (!callback) {
    return this.recv_ext_eccverify();
  }
};

signx_serviceClient.prototype.send_ext_eccverify = function(session, con_uri, b64eccpubblob, b64orgdata, b64signed_data, callback) {
  this.output.writeMessageBegin('ext_eccverify', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64eccpubblob: b64eccpubblob,
    b64orgdata: b64orgdata,
    b64signed_data: b64signed_data
  };
  var args = new signx_service_ext_eccverify_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ext_eccverify();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_ext_eccverify = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_ext_eccverify_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ext_eccverify failed: unknown result';
};
signx_serviceClient.prototype.ext_eccverify_ex = function(session, con_uri, b64ecccertblob, b64orgdata, b64signed_data, callback) {
  this.send_ext_eccverify_ex(session, con_uri, b64ecccertblob, b64orgdata, b64signed_data, callback); 
  if (!callback) {
    return this.recv_ext_eccverify_ex();
  }
};

signx_serviceClient.prototype.send_ext_eccverify_ex = function(session, con_uri, b64ecccertblob, b64orgdata, b64signed_data, callback) {
  this.output.writeMessageBegin('ext_eccverify_ex', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64ecccertblob: b64ecccertblob,
    b64orgdata: b64orgdata,
    b64signed_data: b64signed_data
  };
  var args = new signx_service_ext_eccverify_ex_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ext_eccverify_ex();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_ext_eccverify_ex = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_ext_eccverify_ex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ext_eccverify_ex failed: unknown result';
};
signx_serviceClient.prototype.regist = function(callback) {
  this.send_regist(callback); 
  if (!callback) {
    return this.recv_regist();
  }
};

signx_serviceClient.prototype.send_regist = function(callback) {
  this.output.writeMessageBegin('regist', Thrift.MessageType.CALL, this.seqid);
  var args = new signx_service_regist_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_regist();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_regist = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_regist_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'regist failed: unknown result';
};
signx_serviceClient.prototype.unregist = function(session, callback) {
  this.send_unregist(session, callback); 
  if (!callback) {
    return this.recv_unregist();
  }
};

signx_serviceClient.prototype.send_unregist = function(session, callback) {
  this.output.writeMessageBegin('unregist', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new signx_service_unregist_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregist();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_unregist = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_unregist_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'unregist failed: unknown result';
};
signx_serviceClient.prototype.login = function(session, app_uri, pwd, callback) {
  this.send_login(session, app_uri, pwd, callback); 
  if (!callback) {
    return this.recv_login();
  }
};

signx_serviceClient.prototype.send_login = function(session, app_uri, pwd, callback) {
  this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    pwd: pwd
  };
  var args = new signx_service_login_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_login();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};
signx_serviceClient.prototype.logout = function(session, callback) {
  this.send_logout(session, callback); 
  if (!callback) {
    return this.recv_logout();
  }
};

signx_serviceClient.prototype.send_logout = function(session, callback) {
  this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new signx_service_logout_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_logout();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'logout failed: unknown result';
};
signx_serviceClient.prototype.islogined = function(session, callback) {
  this.send_islogined(session, callback); 
  if (!callback) {
    return this.recv_islogined();
  }
};

signx_serviceClient.prototype.send_islogined = function(session, callback) {
  this.output.writeMessageBegin('islogined', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new signx_service_islogined_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_islogined();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_islogined = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_islogined_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'islogined failed: unknown result';
};
signx_serviceClient.prototype.getb64cert = function(session, con_uri, purpose, callback) {
  this.send_getb64cert(session, con_uri, purpose, callback); 
  if (!callback) {
    return this.recv_getb64cert();
  }
};

signx_serviceClient.prototype.send_getb64cert = function(session, con_uri, purpose, callback) {
  this.output.writeMessageBegin('getb64cert', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    purpose: purpose
  };
  var args = new signx_service_getb64cert_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getb64cert();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_getb64cert = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_getb64cert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getb64cert failed: unknown result';
};
signx_serviceClient.prototype.dupb64cert_with_template = function(session, con_uri, purpose, cert_type, bits, cert_template, x509_extension, hash_method, reserve, callback) {
  this.send_dupb64cert_with_template(session, con_uri, purpose, cert_type, bits, cert_template, x509_extension, hash_method, reserve, callback); 
  if (!callback) {
    return this.recv_dupb64cert_with_template();
  }
};

signx_serviceClient.prototype.send_dupb64cert_with_template = function(session, con_uri, purpose, cert_type, bits, cert_template, x509_extension, hash_method, reserve, callback) {
  this.output.writeMessageBegin('dupb64cert_with_template', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    purpose: purpose,
    cert_type: cert_type,
    bits: bits,
    cert_template: cert_template,
    x509_extension: x509_extension,
    hash_method: hash_method,
    reserve: reserve
  };
  var args = new signx_service_dupb64cert_with_template_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_dupb64cert_with_template();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_dupb64cert_with_template = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_dupb64cert_with_template_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'dupb64cert_with_template failed: unknown result';
};
signx_serviceClient.prototype.get_all_con_uri = function(session, cert_flag_bits, split, callback) {
  this.send_get_all_con_uri(session, cert_flag_bits, split, callback); 
  if (!callback) {
    return this.recv_get_all_con_uri();
  }
};

signx_serviceClient.prototype.send_get_all_con_uri = function(session, cert_flag_bits, split, callback) {
  this.output.writeMessageBegin('get_all_con_uri', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    cert_flag_bits: cert_flag_bits,
    split: split
  };
  var args = new signx_service_get_all_con_uri_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_all_con_uri();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_get_all_con_uri = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_get_all_con_uri_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_all_con_uri failed: unknown result';
};
signx_serviceClient.prototype.finger = function(session, app_uri, wrapper, callback) {
  this.send_finger(session, app_uri, wrapper, callback); 
  if (!callback) {
    return this.recv_finger();
  }
};

signx_serviceClient.prototype.send_finger = function(session, app_uri, wrapper, callback) {
  this.output.writeMessageBegin('finger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    wrapper: wrapper
  };
  var args = new signx_service_finger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_finger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_finger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_finger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'finger failed: unknown result';
};
signx_serviceClient.prototype.command = function(session, any_uri, json_data, callback) {
  this.send_command(session, any_uri, json_data, callback); 
  if (!callback) {
    return this.recv_command();
  }
};

signx_serviceClient.prototype.send_command = function(session, any_uri, json_data, callback) {
  this.output.writeMessageBegin('command', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    any_uri: any_uri,
    json_data: json_data
  };
  var args = new signx_service_command_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_command();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_command = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_command_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'command failed: unknown result';
};
signx_serviceClient.prototype.version = function(callback) {
  this.send_version(callback); 
  if (!callback) {
    return this.recv_version();
  }
};

signx_serviceClient.prototype.send_version = function(callback) {
  this.output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid);
  var args = new signx_service_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'version failed: unknown result';
};
signx_serviceClient.prototype.upgrade = function(b64data, callback) {
  this.send_upgrade(b64data, callback); 
  if (!callback) {
    return this.recv_upgrade();
  }
};

signx_serviceClient.prototype.send_upgrade = function(b64data, callback) {
  this.output.writeMessageBegin('upgrade', Thrift.MessageType.CALL, this.seqid);
  var params = {
    b64data: b64data
  };
  var args = new signx_service_upgrade_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_upgrade();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

signx_serviceClient.prototype.recv_upgrade = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new signx_service_upgrade_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'upgrade failed: unknown result';
};
