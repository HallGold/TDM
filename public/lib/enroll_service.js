//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

enroll_service_reload_args = function(args) {
};
enroll_service_reload_args.prototype = {};
enroll_service_reload_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_reload_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_reload_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_reload_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_reload_result.prototype = {};
enroll_service_reload_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_reload_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_reload_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_count_args = function(args) {
};
enroll_service_get_dev_count_args.prototype = {};
enroll_service_get_dev_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_count_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_count_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_count_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_dev_count_result.prototype = {};
enroll_service_get_dev_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_count_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_name_args = function(args) {
  this.session = null;
  this.dev_idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_idx !== undefined && args.dev_idx !== null) {
      this.dev_idx = args.dev_idx;
    }
  }
};
enroll_service_get_dev_name_args.prototype = {};
enroll_service_get_dev_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dev_idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_name_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_idx !== null && this.dev_idx !== undefined) {
    output.writeFieldBegin('dev_idx', Thrift.Type.I32, 2);
    output.writeI32(this.dev_idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_dev_name_result.prototype = {};
enroll_service_get_dev_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_name_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_uri_args = function(args) {
  this.session = null;
  this.dev_idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_idx !== undefined && args.dev_idx !== null) {
      this.dev_idx = args.dev_idx;
    }
  }
};
enroll_service_get_dev_uri_args.prototype = {};
enroll_service_get_dev_uri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dev_idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_uri_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_uri_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_idx !== null && this.dev_idx !== undefined) {
    output.writeFieldBegin('dev_idx', Thrift.Type.I32, 2);
    output.writeI32(this.dev_idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_uri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_dev_uri_result.prototype = {};
enroll_service_get_dev_uri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_uri_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_uri_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_sn_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
  }
};
enroll_service_get_dev_sn_args.prototype = {};
enroll_service_get_dev_sn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_sn_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_sn_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_sn_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_dev_sn_result.prototype = {};
enroll_service_get_dev_sn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_sn_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_sn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_info_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
  }
};
enroll_service_get_dev_info_args.prototype = {};
enroll_service_get_dev_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_info_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_info_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_dev_info_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_dev_info_result.prototype = {};
enroll_service_get_dev_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_dev_info_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_dev_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_dev_auth_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.b64authcode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.b64authcode !== undefined && args.b64authcode !== null) {
      this.b64authcode = args.b64authcode;
    }
  }
};
enroll_service_dev_auth_args.prototype = {};
enroll_service_dev_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64authcode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_dev_auth_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_dev_auth_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.b64authcode !== null && this.b64authcode !== undefined) {
    output.writeFieldBegin('b64authcode', Thrift.Type.STRING, 3);
    output.writeString(this.b64authcode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_dev_auth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_dev_auth_result.prototype = {};
enroll_service_dev_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_dev_auth_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_dev_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_gen_random_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.random_len = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.random_len !== undefined && args.random_len !== null) {
      this.random_len = args.random_len;
    }
  }
};
enroll_service_gen_random_args.prototype = {};
enroll_service_gen_random_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.random_len = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_gen_random_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_gen_random_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.random_len !== null && this.random_len !== undefined) {
    output.writeFieldBegin('random_len', Thrift.Type.I32, 3);
    output.writeI32(this.random_len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_gen_random_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_gen_random_result.prototype = {};
enroll_service_gen_random_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_gen_random_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_gen_random_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_count_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
  }
};
enroll_service_get_app_count_args.prototype = {};
enroll_service_get_app_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_count_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_count_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_count_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_app_count_result.prototype = {};
enroll_service_get_app_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_count_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_name_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.idx !== undefined && args.idx !== null) {
      this.idx = args.idx;
    }
  }
};
enroll_service_get_app_name_args.prototype = {};
enroll_service_get_app_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_name_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I32, 3);
    output.writeI32(this.idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_app_name_result.prototype = {};
enroll_service_get_app_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_name_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_uri_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.idx !== undefined && args.idx !== null) {
      this.idx = args.idx;
    }
  }
};
enroll_service_get_app_uri_args.prototype = {};
enroll_service_get_app_uri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_uri_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_uri_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I32, 3);
    output.writeI32(this.idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_app_uri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_app_uri_result.prototype = {};
enroll_service_get_app_uri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_app_uri_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_app_uri_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_create_app_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.app_name = null;
  this.sopin = null;
  this.so_retry = null;
  this.usrpin = null;
  this.usr_retry = null;
  this.create_file_rights = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.sopin !== undefined && args.sopin !== null) {
      this.sopin = args.sopin;
    }
    if (args.so_retry !== undefined && args.so_retry !== null) {
      this.so_retry = args.so_retry;
    }
    if (args.usrpin !== undefined && args.usrpin !== null) {
      this.usrpin = args.usrpin;
    }
    if (args.usr_retry !== undefined && args.usr_retry !== null) {
      this.usr_retry = args.usr_retry;
    }
    if (args.create_file_rights !== undefined && args.create_file_rights !== null) {
      this.create_file_rights = args.create_file_rights;
    }
  }
};
enroll_service_create_app_args.prototype = {};
enroll_service_create_app_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sopin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.so_retry = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.usrpin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.usr_retry = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.create_file_rights = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_create_app_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_create_app_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 3);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.sopin !== null && this.sopin !== undefined) {
    output.writeFieldBegin('sopin', Thrift.Type.STRING, 4);
    output.writeString(this.sopin);
    output.writeFieldEnd();
  }
  if (this.so_retry !== null && this.so_retry !== undefined) {
    output.writeFieldBegin('so_retry', Thrift.Type.I32, 5);
    output.writeI32(this.so_retry);
    output.writeFieldEnd();
  }
  if (this.usrpin !== null && this.usrpin !== undefined) {
    output.writeFieldBegin('usrpin', Thrift.Type.STRING, 6);
    output.writeString(this.usrpin);
    output.writeFieldEnd();
  }
  if (this.usr_retry !== null && this.usr_retry !== undefined) {
    output.writeFieldBegin('usr_retry', Thrift.Type.I32, 7);
    output.writeI32(this.usr_retry);
    output.writeFieldEnd();
  }
  if (this.create_file_rights !== null && this.create_file_rights !== undefined) {
    output.writeFieldBegin('create_file_rights', Thrift.Type.I32, 8);
    output.writeI32(this.create_file_rights);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_create_app_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_create_app_result.prototype = {};
enroll_service_create_app_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_create_app_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_create_app_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_app_args = function(args) {
  this.session = null;
  this.dev_uri = null;
  this.app_name = null;
  this.sopin = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.dev_uri !== undefined && args.dev_uri !== null) {
      this.dev_uri = args.dev_uri;
    }
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.sopin !== undefined && args.sopin !== null) {
      this.sopin = args.sopin;
    }
  }
};
enroll_service_del_app_args.prototype = {};
enroll_service_del_app_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dev_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sopin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_app_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_app_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.dev_uri !== null && this.dev_uri !== undefined) {
    output.writeFieldBegin('dev_uri', Thrift.Type.STRING, 2);
    output.writeString(this.dev_uri);
    output.writeFieldEnd();
  }
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 3);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.sopin !== null && this.sopin !== undefined) {
    output.writeFieldBegin('sopin', Thrift.Type.STRING, 4);
    output.writeString(this.sopin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_app_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_del_app_result.prototype = {};
enroll_service_del_app_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_app_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_app_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_change_usrpin_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.old_pin = null;
  this.new_pin = null;
  this.usr_retry = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.old_pin !== undefined && args.old_pin !== null) {
      this.old_pin = args.old_pin;
    }
    if (args.new_pin !== undefined && args.new_pin !== null) {
      this.new_pin = args.new_pin;
    }
    if (args.usr_retry !== undefined && args.usr_retry !== null) {
      this.usr_retry = args.usr_retry;
    }
  }
};
enroll_service_change_usrpin_args.prototype = {};
enroll_service_change_usrpin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.old_pin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.new_pin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.usr_retry = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_change_usrpin_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_change_usrpin_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.old_pin !== null && this.old_pin !== undefined) {
    output.writeFieldBegin('old_pin', Thrift.Type.STRING, 3);
    output.writeString(this.old_pin);
    output.writeFieldEnd();
  }
  if (this.new_pin !== null && this.new_pin !== undefined) {
    output.writeFieldBegin('new_pin', Thrift.Type.STRING, 4);
    output.writeString(this.new_pin);
    output.writeFieldEnd();
  }
  if (this.usr_retry !== null && this.usr_retry !== undefined) {
    output.writeFieldBegin('usr_retry', Thrift.Type.I32, 5);
    output.writeI32(this.usr_retry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_change_usrpin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_change_usrpin_result.prototype = {};
enroll_service_change_usrpin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_change_usrpin_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_change_usrpin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_unlock_usrpin_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.sopin = null;
  this.new_pin = null;
  this.usr_retry = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.sopin !== undefined && args.sopin !== null) {
      this.sopin = args.sopin;
    }
    if (args.new_pin !== undefined && args.new_pin !== null) {
      this.new_pin = args.new_pin;
    }
    if (args.usr_retry !== undefined && args.usr_retry !== null) {
      this.usr_retry = args.usr_retry;
    }
  }
};
enroll_service_unlock_usrpin_args.prototype = {};
enroll_service_unlock_usrpin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sopin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.new_pin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.usr_retry = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_unlock_usrpin_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_unlock_usrpin_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.sopin !== null && this.sopin !== undefined) {
    output.writeFieldBegin('sopin', Thrift.Type.STRING, 3);
    output.writeString(this.sopin);
    output.writeFieldEnd();
  }
  if (this.new_pin !== null && this.new_pin !== undefined) {
    output.writeFieldBegin('new_pin', Thrift.Type.STRING, 4);
    output.writeString(this.new_pin);
    output.writeFieldEnd();
  }
  if (this.usr_retry !== null && this.usr_retry !== undefined) {
    output.writeFieldBegin('usr_retry', Thrift.Type.I32, 5);
    output.writeI32(this.usr_retry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_unlock_usrpin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_unlock_usrpin_result.prototype = {};
enroll_service_unlock_usrpin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_unlock_usrpin_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_unlock_usrpin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_change_sopin_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.old_sopin = null;
  this.new_sopin = null;
  this.so_retry = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.old_sopin !== undefined && args.old_sopin !== null) {
      this.old_sopin = args.old_sopin;
    }
    if (args.new_sopin !== undefined && args.new_sopin !== null) {
      this.new_sopin = args.new_sopin;
    }
    if (args.so_retry !== undefined && args.so_retry !== null) {
      this.so_retry = args.so_retry;
    }
  }
};
enroll_service_change_sopin_args.prototype = {};
enroll_service_change_sopin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.old_sopin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.new_sopin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.so_retry = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_change_sopin_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_change_sopin_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.old_sopin !== null && this.old_sopin !== undefined) {
    output.writeFieldBegin('old_sopin', Thrift.Type.STRING, 3);
    output.writeString(this.old_sopin);
    output.writeFieldEnd();
  }
  if (this.new_sopin !== null && this.new_sopin !== undefined) {
    output.writeFieldBegin('new_sopin', Thrift.Type.STRING, 4);
    output.writeString(this.new_sopin);
    output.writeFieldEnd();
  }
  if (this.so_retry !== null && this.so_retry !== undefined) {
    output.writeFieldBegin('so_retry', Thrift.Type.I32, 5);
    output.writeI32(this.so_retry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_change_sopin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_change_sopin_result.prototype = {};
enroll_service_change_sopin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_change_sopin_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_change_sopin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_count_args = function(args) {
  this.session = null;
  this.app_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
  }
};
enroll_service_get_con_count_args.prototype = {};
enroll_service_get_con_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_count_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_count_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_count_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_con_count_result.prototype = {};
enroll_service_get_con_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_count_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_name_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.con_idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.con_idx !== undefined && args.con_idx !== null) {
      this.con_idx = args.con_idx;
    }
  }
};
enroll_service_get_con_name_args.prototype = {};
enroll_service_get_con_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.con_idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_name_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.con_idx !== null && this.con_idx !== undefined) {
    output.writeFieldBegin('con_idx', Thrift.Type.I32, 3);
    output.writeI32(this.con_idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_con_name_result.prototype = {};
enroll_service_get_con_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_name_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_uri_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.con_idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.con_idx !== undefined && args.con_idx !== null) {
      this.con_idx = args.con_idx;
    }
  }
};
enroll_service_get_con_uri_args.prototype = {};
enroll_service_get_con_uri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.con_idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_uri_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_uri_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.con_idx !== null && this.con_idx !== undefined) {
    output.writeFieldBegin('con_idx', Thrift.Type.I32, 3);
    output.writeI32(this.con_idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_con_uri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_con_uri_result.prototype = {};
enroll_service_get_con_uri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_con_uri_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_con_uri_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_create_con_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.con_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.con_name !== undefined && args.con_name !== null) {
      this.con_name = args.con_name;
    }
  }
};
enroll_service_create_con_args.prototype = {};
enroll_service_create_con_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.con_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_create_con_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_create_con_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.con_name !== null && this.con_name !== undefined) {
    output.writeFieldBegin('con_name', Thrift.Type.STRING, 3);
    output.writeString(this.con_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_create_con_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_create_con_result.prototype = {};
enroll_service_create_con_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_create_con_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_create_con_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_con_args = function(args) {
  this.session = null;
  this.con_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
  }
};
enroll_service_del_con_args.prototype = {};
enroll_service_del_con_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_con_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_con_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_con_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_del_con_result.prototype = {};
enroll_service_del_con_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_con_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_con_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_pubkey_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.purpose = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.purpose !== undefined && args.purpose !== null) {
      this.purpose = args.purpose;
    }
  }
};
enroll_service_get_pubkey_args.prototype = {};
enroll_service_get_pubkey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.purpose = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_pubkey_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_pubkey_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.I32, 3);
    output.writeI32(this.purpose);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_pubkey_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_pubkey_result.prototype = {};
enroll_service_get_pubkey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_pubkey_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_pubkey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_getb64cert_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.purpose = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.purpose !== undefined && args.purpose !== null) {
      this.purpose = args.purpose;
    }
  }
};
enroll_service_getb64cert_args.prototype = {};
enroll_service_getb64cert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.purpose = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_getb64cert_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_getb64cert_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.I32, 3);
    output.writeI32(this.purpose);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_getb64cert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_getb64cert_result.prototype = {};
enroll_service_getb64cert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_getb64cert_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_getb64cert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_genb64keypair_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.media_type = null;
  this.purpose = null;
  this.keylen = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.media_type !== undefined && args.media_type !== null) {
      this.media_type = args.media_type;
    }
    if (args.purpose !== undefined && args.purpose !== null) {
      this.purpose = args.purpose;
    }
    if (args.keylen !== undefined && args.keylen !== null) {
      this.keylen = args.keylen;
    }
  }
};
enroll_service_genb64keypair_args.prototype = {};
enroll_service_genb64keypair_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.media_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.purpose = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.keylen = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_genb64keypair_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_genb64keypair_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.media_type !== null && this.media_type !== undefined) {
    output.writeFieldBegin('media_type', Thrift.Type.I32, 3);
    output.writeI32(this.media_type);
    output.writeFieldEnd();
  }
  if (this.purpose !== null && this.purpose !== undefined) {
    output.writeFieldBegin('purpose', Thrift.Type.I32, 4);
    output.writeI32(this.purpose);
    output.writeFieldEnd();
  }
  if (this.keylen !== null && this.keylen !== undefined) {
    output.writeFieldBegin('keylen', Thrift.Type.I32, 5);
    output.writeI32(this.keylen);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_genb64keypair_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_genb64keypair_result.prototype = {};
enroll_service_genb64keypair_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_genb64keypair_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_genb64keypair_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_gen_p10_req_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.dn = null;
  this.split = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.dn !== undefined && args.dn !== null) {
      this.dn = args.dn;
    }
    if (args.split !== undefined && args.split !== null) {
      this.split = args.split;
    }
  }
};
enroll_service_gen_p10_req_args.prototype = {};
enroll_service_gen_p10_req_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.split = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_gen_p10_req_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_gen_p10_req_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.dn !== null && this.dn !== undefined) {
    output.writeFieldBegin('dn', Thrift.Type.STRING, 3);
    output.writeString(this.dn);
    output.writeFieldEnd();
  }
  if (this.split !== null && this.split !== undefined) {
    output.writeFieldBegin('split', Thrift.Type.STRING, 4);
    output.writeString(this.split);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_gen_p10_req_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_gen_p10_req_result.prototype = {};
enroll_service_gen_p10_req_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_gen_p10_req_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_gen_p10_req_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_x509_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64cert = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64cert !== undefined && args.b64cert !== null) {
      this.b64cert = args.b64cert;
    }
  }
};
enroll_service_import_x509_args.prototype = {};
enroll_service_import_x509_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64cert = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_x509_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_x509_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64cert !== null && this.b64cert !== undefined) {
    output.writeFieldBegin('b64cert', Thrift.Type.STRING, 3);
    output.writeString(this.b64cert);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_x509_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_import_x509_result.prototype = {};
enroll_service_import_x509_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_x509_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_x509_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_enc_keypair_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64asn1 = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64asn1 !== undefined && args.b64asn1 !== null) {
      this.b64asn1 = args.b64asn1;
    }
  }
};
enroll_service_import_enc_keypair_args.prototype = {};
enroll_service_import_enc_keypair_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64asn1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_enc_keypair_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_enc_keypair_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64asn1 !== null && this.b64asn1 !== undefined) {
    output.writeFieldBegin('b64asn1', Thrift.Type.STRING, 3);
    output.writeString(this.b64asn1);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_enc_keypair_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_import_enc_keypair_result.prototype = {};
enroll_service_import_enc_keypair_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_enc_keypair_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_enc_keypair_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_pfx_args = function(args) {
  this.session = null;
  this.con_uri = null;
  this.b64cert = null;
  this.cert_pwd = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.con_uri !== undefined && args.con_uri !== null) {
      this.con_uri = args.con_uri;
    }
    if (args.b64cert !== undefined && args.b64cert !== null) {
      this.b64cert = args.b64cert;
    }
    if (args.cert_pwd !== undefined && args.cert_pwd !== null) {
      this.cert_pwd = args.cert_pwd;
    }
  }
};
enroll_service_import_pfx_args.prototype = {};
enroll_service_import_pfx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.con_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.b64cert = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cert_pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_pfx_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_pfx_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.con_uri !== null && this.con_uri !== undefined) {
    output.writeFieldBegin('con_uri', Thrift.Type.STRING, 2);
    output.writeString(this.con_uri);
    output.writeFieldEnd();
  }
  if (this.b64cert !== null && this.b64cert !== undefined) {
    output.writeFieldBegin('b64cert', Thrift.Type.STRING, 3);
    output.writeString(this.b64cert);
    output.writeFieldEnd();
  }
  if (this.cert_pwd !== null && this.cert_pwd !== undefined) {
    output.writeFieldBegin('cert_pwd', Thrift.Type.STRING, 4);
    output.writeString(this.cert_pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_import_pfx_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_import_pfx_result.prototype = {};
enroll_service_import_pfx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_import_pfx_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_import_pfx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_file_num_args = function(args) {
  this.session = null;
  this.app_uri = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
  }
};
enroll_service_get_file_num_args.prototype = {};
enroll_service_get_file_num_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_file_num_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_file_num_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_file_num_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_file_num_result.prototype = {};
enroll_service_get_file_num_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_file_num_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_file_num_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_file_name_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.idx = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.idx !== undefined && args.idx !== null) {
      this.idx = args.idx;
    }
  }
};
enroll_service_get_file_name_args.prototype = {};
enroll_service_get_file_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.idx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_file_name_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_file_name_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.idx !== null && this.idx !== undefined) {
    output.writeFieldBegin('idx', Thrift.Type.I32, 3);
    output.writeI32(this.idx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_get_file_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_get_file_name_result.prototype = {};
enroll_service_get_file_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_get_file_name_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_get_file_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_read_file_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.file_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
  }
};
enroll_service_read_file_args.prototype = {};
enroll_service_read_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_read_file_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_read_file_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_read_file_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_read_file_result.prototype = {};
enroll_service_read_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_read_file_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_read_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_write_file_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.file_name = null;
  this.b64data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.b64data !== undefined && args.b64data !== null) {
      this.b64data = args.b64data;
    }
  }
};
enroll_service_write_file_args.prototype = {};
enroll_service_write_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.b64data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_write_file_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_write_file_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.b64data !== null && this.b64data !== undefined) {
    output.writeFieldBegin('b64data', Thrift.Type.STRING, 4);
    output.writeString(this.b64data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_write_file_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_write_file_result.prototype = {};
enroll_service_write_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_write_file_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_write_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_file_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.file_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
  }
};
enroll_service_del_file_args.prototype = {};
enroll_service_del_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_file_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_file_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_del_file_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_del_file_result.prototype = {};
enroll_service_del_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_del_file_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_del_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_set_env_args = function(args) {
  this.session = null;
  this.env = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.env !== undefined && args.env !== null) {
      this.env = args.env;
    }
  }
};
enroll_service_set_env_args.prototype = {};
enroll_service_set_env_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.env = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_set_env_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_set_env_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.env !== null && this.env !== undefined) {
    output.writeFieldBegin('env', Thrift.Type.STRING, 2);
    output.writeString(this.env);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_set_env_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_set_env_result.prototype = {};
enroll_service_set_env_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_set_env_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_set_env_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_regist_args = function(args) {
};
enroll_service_regist_args.prototype = {};
enroll_service_regist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_regist_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_regist_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_regist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_regist_result.prototype = {};
enroll_service_regist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_regist_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_regist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_unregist_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
enroll_service_unregist_args.prototype = {};
enroll_service_unregist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_unregist_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_unregist_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_unregist_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_unregist_result.prototype = {};
enroll_service_unregist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_unregist_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_unregist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_login_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.pwd = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
  }
};
enroll_service_login_args.prototype = {};
enroll_service_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_login_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_login_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_login_result.prototype = {};
enroll_service_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_login_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_logout_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
enroll_service_logout_args.prototype = {};
enroll_service_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_logout_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_logout_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_logout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_logout_result.prototype = {};
enroll_service_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_logout_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_islogined_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
enroll_service_islogined_args.prototype = {};
enroll_service_islogined_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_islogined_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_islogined_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_islogined_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_islogined_result.prototype = {};
enroll_service_islogined_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_islogined_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_islogined_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_status_callback_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
enroll_service_status_callback_args.prototype = {};
enroll_service_status_callback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_status_callback_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_status_callback_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_status_callback_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_status_callback_result.prototype = {};
enroll_service_status_callback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_status_callback_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_status_callback_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_finger_args = function(args) {
  this.session = null;
  this.app_uri = null;
  this.wrapper = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.app_uri !== undefined && args.app_uri !== null) {
      this.app_uri = args.app_uri;
    }
    if (args.wrapper !== undefined && args.wrapper !== null) {
      this.wrapper = args.wrapper;
    }
  }
};
enroll_service_finger_args.prototype = {};
enroll_service_finger_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.wrapper = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_finger_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_finger_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.app_uri !== null && this.app_uri !== undefined) {
    output.writeFieldBegin('app_uri', Thrift.Type.STRING, 2);
    output.writeString(this.app_uri);
    output.writeFieldEnd();
  }
  if (this.wrapper !== null && this.wrapper !== undefined) {
    output.writeFieldBegin('wrapper', Thrift.Type.STRING, 3);
    output.writeString(this.wrapper);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_finger_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_finger_result.prototype = {};
enroll_service_finger_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_finger_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_finger_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_command_args = function(args) {
  this.session = null;
  this.any_uri = null;
  this.json_data = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.any_uri !== undefined && args.any_uri !== null) {
      this.any_uri = args.any_uri;
    }
    if (args.json_data !== undefined && args.json_data !== null) {
      this.json_data = args.json_data;
    }
  }
};
enroll_service_command_args.prototype = {};
enroll_service_command_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.any_uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.json_data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_command_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_command_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRING, 1);
    output.writeString(this.session);
    output.writeFieldEnd();
  }
  if (this.any_uri !== null && this.any_uri !== undefined) {
    output.writeFieldBegin('any_uri', Thrift.Type.STRING, 2);
    output.writeString(this.any_uri);
    output.writeFieldEnd();
  }
  if (this.json_data !== null && this.json_data !== undefined) {
    output.writeFieldBegin('json_data', Thrift.Type.STRING, 3);
    output.writeString(this.json_data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_command_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_command_result.prototype = {};
enroll_service_command_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_command_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_command_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_version_args = function(args) {
};
enroll_service_version_args.prototype = {};
enroll_service_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_version_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_version_result.prototype = {};
enroll_service_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_version_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_upgrade_args = function(args) {
  this.b64data = null;
  if (args) {
    if (args.b64data !== undefined && args.b64data !== null) {
      this.b64data = args.b64data;
    }
  }
};
enroll_service_upgrade_args.prototype = {};
enroll_service_upgrade_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.b64data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_upgrade_args.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_upgrade_args');
  if (this.b64data !== null && this.b64data !== undefined) {
    output.writeFieldBegin('b64data', Thrift.Type.STRING, 1);
    output.writeString(this.b64data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_service_upgrade_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ResultValue(args.success);
    }
  }
};
enroll_service_upgrade_result.prototype = {};
enroll_service_upgrade_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enroll_service_upgrade_result.prototype.write = function(output) {
  output.writeStructBegin('enroll_service_upgrade_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enroll_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
enroll_serviceClient.prototype = {};
enroll_serviceClient.prototype.reload = function(callback) {
  this.send_reload(callback); 
  if (!callback) {
    return this.recv_reload();
  }
};

enroll_serviceClient.prototype.send_reload = function(callback) {
  this.output.writeMessageBegin('reload', Thrift.MessageType.CALL, this.seqid);
  var args = new enroll_service_reload_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_reload();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_reload = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_reload_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'reload failed: unknown result';
};
enroll_serviceClient.prototype.get_dev_count = function(callback) {
  this.send_get_dev_count(callback); 
  if (!callback) {
    return this.recv_get_dev_count();
  }
};

enroll_serviceClient.prototype.send_get_dev_count = function(callback) {
  this.output.writeMessageBegin('get_dev_count', Thrift.MessageType.CALL, this.seqid);
  var args = new enroll_service_get_dev_count_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dev_count();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_dev_count = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_dev_count_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dev_count failed: unknown result';
};
enroll_serviceClient.prototype.get_dev_name = function(session, dev_idx, callback) {
  this.send_get_dev_name(session, dev_idx, callback); 
  if (!callback) {
    return this.recv_get_dev_name();
  }
};

enroll_serviceClient.prototype.send_get_dev_name = function(session, dev_idx, callback) {
  this.output.writeMessageBegin('get_dev_name', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_idx: dev_idx
  };
  var args = new enroll_service_get_dev_name_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dev_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_dev_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_dev_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dev_name failed: unknown result';
};
enroll_serviceClient.prototype.get_dev_uri = function(session, dev_idx, callback) {
  this.send_get_dev_uri(session, dev_idx, callback); 
  if (!callback) {
    return this.recv_get_dev_uri();
  }
};

enroll_serviceClient.prototype.send_get_dev_uri = function(session, dev_idx, callback) {
  this.output.writeMessageBegin('get_dev_uri', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_idx: dev_idx
  };
  var args = new enroll_service_get_dev_uri_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dev_uri();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_dev_uri = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_dev_uri_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dev_uri failed: unknown result';
};
enroll_serviceClient.prototype.get_dev_sn = function(session, dev_uri, callback) {
  this.send_get_dev_sn(session, dev_uri, callback); 
  if (!callback) {
    return this.recv_get_dev_sn();
  }
};

enroll_serviceClient.prototype.send_get_dev_sn = function(session, dev_uri, callback) {
  this.output.writeMessageBegin('get_dev_sn', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri
  };
  var args = new enroll_service_get_dev_sn_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dev_sn();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_dev_sn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_dev_sn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dev_sn failed: unknown result';
};
enroll_serviceClient.prototype.get_dev_info = function(session, dev_uri, callback) {
  this.send_get_dev_info(session, dev_uri, callback); 
  if (!callback) {
    return this.recv_get_dev_info();
  }
};

enroll_serviceClient.prototype.send_get_dev_info = function(session, dev_uri, callback) {
  this.output.writeMessageBegin('get_dev_info', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri
  };
  var args = new enroll_service_get_dev_info_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_dev_info();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_dev_info = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_dev_info_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_dev_info failed: unknown result';
};
enroll_serviceClient.prototype.dev_auth = function(session, dev_uri, b64authcode, callback) {
  this.send_dev_auth(session, dev_uri, b64authcode, callback); 
  if (!callback) {
    return this.recv_dev_auth();
  }
};

enroll_serviceClient.prototype.send_dev_auth = function(session, dev_uri, b64authcode, callback) {
  this.output.writeMessageBegin('dev_auth', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    b64authcode: b64authcode
  };
  var args = new enroll_service_dev_auth_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_dev_auth();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_dev_auth = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_dev_auth_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'dev_auth failed: unknown result';
};
enroll_serviceClient.prototype.gen_random = function(session, dev_uri, random_len, callback) {
  this.send_gen_random(session, dev_uri, random_len, callback); 
  if (!callback) {
    return this.recv_gen_random();
  }
};

enroll_serviceClient.prototype.send_gen_random = function(session, dev_uri, random_len, callback) {
  this.output.writeMessageBegin('gen_random', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    random_len: random_len
  };
  var args = new enroll_service_gen_random_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_gen_random();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_gen_random = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_gen_random_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'gen_random failed: unknown result';
};
enroll_serviceClient.prototype.get_app_count = function(session, dev_uri, callback) {
  this.send_get_app_count(session, dev_uri, callback); 
  if (!callback) {
    return this.recv_get_app_count();
  }
};

enroll_serviceClient.prototype.send_get_app_count = function(session, dev_uri, callback) {
  this.output.writeMessageBegin('get_app_count', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri
  };
  var args = new enroll_service_get_app_count_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_app_count();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_app_count = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_app_count_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_app_count failed: unknown result';
};
enroll_serviceClient.prototype.get_app_name = function(session, dev_uri, idx, callback) {
  this.send_get_app_name(session, dev_uri, idx, callback); 
  if (!callback) {
    return this.recv_get_app_name();
  }
};

enroll_serviceClient.prototype.send_get_app_name = function(session, dev_uri, idx, callback) {
  this.output.writeMessageBegin('get_app_name', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    idx: idx
  };
  var args = new enroll_service_get_app_name_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_app_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_app_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_app_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_app_name failed: unknown result';
};
enroll_serviceClient.prototype.get_app_uri = function(session, dev_uri, idx, callback) {
  this.send_get_app_uri(session, dev_uri, idx, callback); 
  if (!callback) {
    return this.recv_get_app_uri();
  }
};

enroll_serviceClient.prototype.send_get_app_uri = function(session, dev_uri, idx, callback) {
  this.output.writeMessageBegin('get_app_uri', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    idx: idx
  };
  var args = new enroll_service_get_app_uri_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_app_uri();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_app_uri = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_app_uri_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_app_uri failed: unknown result';
};
enroll_serviceClient.prototype.create_app = function(session, dev_uri, app_name, sopin, so_retry, usrpin, usr_retry, create_file_rights, callback) {
  this.send_create_app(session, dev_uri, app_name, sopin, so_retry, usrpin, usr_retry, create_file_rights, callback); 
  if (!callback) {
    return this.recv_create_app();
  }
};

enroll_serviceClient.prototype.send_create_app = function(session, dev_uri, app_name, sopin, so_retry, usrpin, usr_retry, create_file_rights, callback) {
  this.output.writeMessageBegin('create_app', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    app_name: app_name,
    sopin: sopin,
    so_retry: so_retry,
    usrpin: usrpin,
    usr_retry: usr_retry,
    create_file_rights: create_file_rights
  };
  var args = new enroll_service_create_app_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_app();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_create_app = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_create_app_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'create_app failed: unknown result';
};
enroll_serviceClient.prototype.del_app = function(session, dev_uri, app_name, sopin, callback) {
  this.send_del_app(session, dev_uri, app_name, sopin, callback); 
  if (!callback) {
    return this.recv_del_app();
  }
};

enroll_serviceClient.prototype.send_del_app = function(session, dev_uri, app_name, sopin, callback) {
  this.output.writeMessageBegin('del_app', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    dev_uri: dev_uri,
    app_name: app_name,
    sopin: sopin
  };
  var args = new enroll_service_del_app_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_del_app();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_del_app = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_del_app_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'del_app failed: unknown result';
};
enroll_serviceClient.prototype.change_usrpin = function(session, app_uri, old_pin, new_pin, usr_retry, callback) {
  this.send_change_usrpin(session, app_uri, old_pin, new_pin, usr_retry, callback); 
  if (!callback) {
    return this.recv_change_usrpin();
  }
};

enroll_serviceClient.prototype.send_change_usrpin = function(session, app_uri, old_pin, new_pin, usr_retry, callback) {
  this.output.writeMessageBegin('change_usrpin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    old_pin: old_pin,
    new_pin: new_pin,
    usr_retry: usr_retry
  };
  var args = new enroll_service_change_usrpin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_change_usrpin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_change_usrpin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_change_usrpin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'change_usrpin failed: unknown result';
};
enroll_serviceClient.prototype.unlock_usrpin = function(session, app_uri, sopin, new_pin, usr_retry, callback) {
  this.send_unlock_usrpin(session, app_uri, sopin, new_pin, usr_retry, callback); 
  if (!callback) {
    return this.recv_unlock_usrpin();
  }
};

enroll_serviceClient.prototype.send_unlock_usrpin = function(session, app_uri, sopin, new_pin, usr_retry, callback) {
  this.output.writeMessageBegin('unlock_usrpin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    sopin: sopin,
    new_pin: new_pin,
    usr_retry: usr_retry
  };
  var args = new enroll_service_unlock_usrpin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unlock_usrpin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_unlock_usrpin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_unlock_usrpin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'unlock_usrpin failed: unknown result';
};
enroll_serviceClient.prototype.change_sopin = function(session, app_uri, old_sopin, new_sopin, so_retry, callback) {
  this.send_change_sopin(session, app_uri, old_sopin, new_sopin, so_retry, callback); 
  if (!callback) {
    return this.recv_change_sopin();
  }
};

enroll_serviceClient.prototype.send_change_sopin = function(session, app_uri, old_sopin, new_sopin, so_retry, callback) {
  this.output.writeMessageBegin('change_sopin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    old_sopin: old_sopin,
    new_sopin: new_sopin,
    so_retry: so_retry
  };
  var args = new enroll_service_change_sopin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_change_sopin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_change_sopin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_change_sopin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'change_sopin failed: unknown result';
};
enroll_serviceClient.prototype.get_con_count = function(session, app_uri, callback) {
  this.send_get_con_count(session, app_uri, callback); 
  if (!callback) {
    return this.recv_get_con_count();
  }
};

enroll_serviceClient.prototype.send_get_con_count = function(session, app_uri, callback) {
  this.output.writeMessageBegin('get_con_count', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri
  };
  var args = new enroll_service_get_con_count_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_con_count();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_con_count = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_con_count_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_con_count failed: unknown result';
};
enroll_serviceClient.prototype.get_con_name = function(session, app_uri, con_idx, callback) {
  this.send_get_con_name(session, app_uri, con_idx, callback); 
  if (!callback) {
    return this.recv_get_con_name();
  }
};

enroll_serviceClient.prototype.send_get_con_name = function(session, app_uri, con_idx, callback) {
  this.output.writeMessageBegin('get_con_name', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    con_idx: con_idx
  };
  var args = new enroll_service_get_con_name_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_con_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_con_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_con_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_con_name failed: unknown result';
};
enroll_serviceClient.prototype.get_con_uri = function(session, app_uri, con_idx, callback) {
  this.send_get_con_uri(session, app_uri, con_idx, callback); 
  if (!callback) {
    return this.recv_get_con_uri();
  }
};

enroll_serviceClient.prototype.send_get_con_uri = function(session, app_uri, con_idx, callback) {
  this.output.writeMessageBegin('get_con_uri', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    con_idx: con_idx
  };
  var args = new enroll_service_get_con_uri_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_con_uri();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_con_uri = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_con_uri_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_con_uri failed: unknown result';
};
enroll_serviceClient.prototype.create_con = function(session, app_uri, con_name, callback) {
  this.send_create_con(session, app_uri, con_name, callback); 
  if (!callback) {
    return this.recv_create_con();
  }
};

enroll_serviceClient.prototype.send_create_con = function(session, app_uri, con_name, callback) {
  this.output.writeMessageBegin('create_con', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    con_name: con_name
  };
  var args = new enroll_service_create_con_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_con();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_create_con = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_create_con_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'create_con failed: unknown result';
};
enroll_serviceClient.prototype.del_con = function(session, con_uri, callback) {
  this.send_del_con(session, con_uri, callback); 
  if (!callback) {
    return this.recv_del_con();
  }
};

enroll_serviceClient.prototype.send_del_con = function(session, con_uri, callback) {
  this.output.writeMessageBegin('del_con', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri
  };
  var args = new enroll_service_del_con_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_del_con();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_del_con = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_del_con_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'del_con failed: unknown result';
};
enroll_serviceClient.prototype.get_pubkey = function(session, con_uri, purpose, callback) {
  this.send_get_pubkey(session, con_uri, purpose, callback); 
  if (!callback) {
    return this.recv_get_pubkey();
  }
};

enroll_serviceClient.prototype.send_get_pubkey = function(session, con_uri, purpose, callback) {
  this.output.writeMessageBegin('get_pubkey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    purpose: purpose
  };
  var args = new enroll_service_get_pubkey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_pubkey();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_pubkey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_pubkey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_pubkey failed: unknown result';
};
enroll_serviceClient.prototype.getb64cert = function(session, con_uri, purpose, callback) {
  this.send_getb64cert(session, con_uri, purpose, callback); 
  if (!callback) {
    return this.recv_getb64cert();
  }
};

enroll_serviceClient.prototype.send_getb64cert = function(session, con_uri, purpose, callback) {
  this.output.writeMessageBegin('getb64cert', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    purpose: purpose
  };
  var args = new enroll_service_getb64cert_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getb64cert();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_getb64cert = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_getb64cert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getb64cert failed: unknown result';
};
enroll_serviceClient.prototype.genb64keypair = function(session, con_uri, media_type, purpose, keylen, callback) {
  this.send_genb64keypair(session, con_uri, media_type, purpose, keylen, callback); 
  if (!callback) {
    return this.recv_genb64keypair();
  }
};

enroll_serviceClient.prototype.send_genb64keypair = function(session, con_uri, media_type, purpose, keylen, callback) {
  this.output.writeMessageBegin('genb64keypair', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    media_type: media_type,
    purpose: purpose,
    keylen: keylen
  };
  var args = new enroll_service_genb64keypair_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_genb64keypair();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_genb64keypair = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_genb64keypair_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'genb64keypair failed: unknown result';
};
enroll_serviceClient.prototype.gen_p10_req = function(session, con_uri, dn, split, callback) {
  this.send_gen_p10_req(session, con_uri, dn, split, callback); 
  if (!callback) {
    return this.recv_gen_p10_req();
  }
};

enroll_serviceClient.prototype.send_gen_p10_req = function(session, con_uri, dn, split, callback) {
  this.output.writeMessageBegin('gen_p10_req', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    dn: dn,
    split: split
  };
  var args = new enroll_service_gen_p10_req_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_gen_p10_req();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_gen_p10_req = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_gen_p10_req_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'gen_p10_req failed: unknown result';
};
enroll_serviceClient.prototype.import_x509 = function(session, con_uri, b64cert, callback) {
  this.send_import_x509(session, con_uri, b64cert, callback); 
  if (!callback) {
    return this.recv_import_x509();
  }
};

enroll_serviceClient.prototype.send_import_x509 = function(session, con_uri, b64cert, callback) {
  this.output.writeMessageBegin('import_x509', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64cert: b64cert
  };
  var args = new enroll_service_import_x509_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_x509();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_import_x509 = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_import_x509_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'import_x509 failed: unknown result';
};
enroll_serviceClient.prototype.import_enc_keypair = function(session, con_uri, b64asn1, callback) {
  this.send_import_enc_keypair(session, con_uri, b64asn1, callback); 
  if (!callback) {
    return this.recv_import_enc_keypair();
  }
};

enroll_serviceClient.prototype.send_import_enc_keypair = function(session, con_uri, b64asn1, callback) {
  this.output.writeMessageBegin('import_enc_keypair', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64asn1: b64asn1
  };
  var args = new enroll_service_import_enc_keypair_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_enc_keypair();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_import_enc_keypair = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_import_enc_keypair_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'import_enc_keypair failed: unknown result';
};
enroll_serviceClient.prototype.import_pfx = function(session, con_uri, b64cert, cert_pwd, callback) {
  this.send_import_pfx(session, con_uri, b64cert, cert_pwd, callback); 
  if (!callback) {
    return this.recv_import_pfx();
  }
};

enroll_serviceClient.prototype.send_import_pfx = function(session, con_uri, b64cert, cert_pwd, callback) {
  this.output.writeMessageBegin('import_pfx', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    con_uri: con_uri,
    b64cert: b64cert,
    cert_pwd: cert_pwd
  };
  var args = new enroll_service_import_pfx_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_pfx();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_import_pfx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_import_pfx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'import_pfx failed: unknown result';
};
enroll_serviceClient.prototype.get_file_num = function(session, app_uri, callback) {
  this.send_get_file_num(session, app_uri, callback); 
  if (!callback) {
    return this.recv_get_file_num();
  }
};

enroll_serviceClient.prototype.send_get_file_num = function(session, app_uri, callback) {
  this.output.writeMessageBegin('get_file_num', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri
  };
  var args = new enroll_service_get_file_num_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_file_num();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_file_num = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_file_num_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_file_num failed: unknown result';
};
enroll_serviceClient.prototype.get_file_name = function(session, app_uri, idx, callback) {
  this.send_get_file_name(session, app_uri, idx, callback); 
  if (!callback) {
    return this.recv_get_file_name();
  }
};

enroll_serviceClient.prototype.send_get_file_name = function(session, app_uri, idx, callback) {
  this.output.writeMessageBegin('get_file_name', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    idx: idx
  };
  var args = new enroll_service_get_file_name_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_file_name();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_get_file_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_get_file_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_file_name failed: unknown result';
};
enroll_serviceClient.prototype.read_file = function(session, app_uri, file_name, callback) {
  this.send_read_file(session, app_uri, file_name, callback); 
  if (!callback) {
    return this.recv_read_file();
  }
};

enroll_serviceClient.prototype.send_read_file = function(session, app_uri, file_name, callback) {
  this.output.writeMessageBegin('read_file', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    file_name: file_name
  };
  var args = new enroll_service_read_file_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_read_file();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_read_file = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_read_file_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'read_file failed: unknown result';
};
enroll_serviceClient.prototype.write_file = function(session, app_uri, file_name, b64data, callback) {
  this.send_write_file(session, app_uri, file_name, b64data, callback); 
  if (!callback) {
    return this.recv_write_file();
  }
};

enroll_serviceClient.prototype.send_write_file = function(session, app_uri, file_name, b64data, callback) {
  this.output.writeMessageBegin('write_file', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    file_name: file_name,
    b64data: b64data
  };
  var args = new enroll_service_write_file_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_write_file();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_write_file = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_write_file_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'write_file failed: unknown result';
};
enroll_serviceClient.prototype.del_file = function(session, app_uri, file_name, callback) {
  this.send_del_file(session, app_uri, file_name, callback); 
  if (!callback) {
    return this.recv_del_file();
  }
};

enroll_serviceClient.prototype.send_del_file = function(session, app_uri, file_name, callback) {
  this.output.writeMessageBegin('del_file', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    file_name: file_name
  };
  var args = new enroll_service_del_file_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_del_file();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_del_file = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_del_file_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'del_file failed: unknown result';
};
enroll_serviceClient.prototype.set_env = function(session, env, callback) {
  this.send_set_env(session, env, callback); 
  if (!callback) {
    return this.recv_set_env();
  }
};

enroll_serviceClient.prototype.send_set_env = function(session, env, callback) {
  this.output.writeMessageBegin('set_env', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    env: env
  };
  var args = new enroll_service_set_env_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_env();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_set_env = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_set_env_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'set_env failed: unknown result';
};
enroll_serviceClient.prototype.regist = function(callback) {
  this.send_regist(callback); 
  if (!callback) {
    return this.recv_regist();
  }
};

enroll_serviceClient.prototype.send_regist = function(callback) {
  this.output.writeMessageBegin('regist', Thrift.MessageType.CALL, this.seqid);
  var args = new enroll_service_regist_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_regist();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_regist = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_regist_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'regist failed: unknown result';
};
enroll_serviceClient.prototype.unregist = function(session, callback) {
  this.send_unregist(session, callback); 
  if (!callback) {
    return this.recv_unregist();
  }
};

enroll_serviceClient.prototype.send_unregist = function(session, callback) {
  this.output.writeMessageBegin('unregist', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new enroll_service_unregist_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregist();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_unregist = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_unregist_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'unregist failed: unknown result';
};
enroll_serviceClient.prototype.login = function(session, app_uri, pwd, callback) {
  this.send_login(session, app_uri, pwd, callback); 
  if (!callback) {
    return this.recv_login();
  }
};

enroll_serviceClient.prototype.send_login = function(session, app_uri, pwd, callback) {
  this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    pwd: pwd
  };
  var args = new enroll_service_login_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_login();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};
enroll_serviceClient.prototype.logout = function(session, callback) {
  this.send_logout(session, callback); 
  if (!callback) {
    return this.recv_logout();
  }
};

enroll_serviceClient.prototype.send_logout = function(session, callback) {
  this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new enroll_service_logout_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_logout();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'logout failed: unknown result';
};
enroll_serviceClient.prototype.islogined = function(session, callback) {
  this.send_islogined(session, callback); 
  if (!callback) {
    return this.recv_islogined();
  }
};

enroll_serviceClient.prototype.send_islogined = function(session, callback) {
  this.output.writeMessageBegin('islogined', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new enroll_service_islogined_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_islogined();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_islogined = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_islogined_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'islogined failed: unknown result';
};
enroll_serviceClient.prototype.status_callback = function(session, callback) {
  this.send_status_callback(session, callback); 
  if (!callback) {
    return this.recv_status_callback();
  }
};

enroll_serviceClient.prototype.send_status_callback = function(session, callback) {
  this.output.writeMessageBegin('status_callback', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session
  };
  var args = new enroll_service_status_callback_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_status_callback();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_status_callback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_status_callback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'status_callback failed: unknown result';
};
enroll_serviceClient.prototype.finger = function(session, app_uri, wrapper, callback) {
  this.send_finger(session, app_uri, wrapper, callback); 
  if (!callback) {
    return this.recv_finger();
  }
};

enroll_serviceClient.prototype.send_finger = function(session, app_uri, wrapper, callback) {
  this.output.writeMessageBegin('finger', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    app_uri: app_uri,
    wrapper: wrapper
  };
  var args = new enroll_service_finger_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_finger();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_finger = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_finger_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'finger failed: unknown result';
};
enroll_serviceClient.prototype.command = function(session, any_uri, json_data, callback) {
  this.send_command(session, any_uri, json_data, callback); 
  if (!callback) {
    return this.recv_command();
  }
};

enroll_serviceClient.prototype.send_command = function(session, any_uri, json_data, callback) {
  this.output.writeMessageBegin('command', Thrift.MessageType.CALL, this.seqid);
  var params = {
    session: session,
    any_uri: any_uri,
    json_data: json_data
  };
  var args = new enroll_service_command_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_command();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_command = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_command_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'command failed: unknown result';
};
enroll_serviceClient.prototype.version = function(callback) {
  this.send_version(callback); 
  if (!callback) {
    return this.recv_version();
  }
};

enroll_serviceClient.prototype.send_version = function(callback) {
  this.output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid);
  var args = new enroll_service_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'version failed: unknown result';
};
enroll_serviceClient.prototype.upgrade = function(b64data, callback) {
  this.send_upgrade(b64data, callback); 
  if (!callback) {
    return this.recv_upgrade();
  }
};

enroll_serviceClient.prototype.send_upgrade = function(b64data, callback) {
  this.output.writeMessageBegin('upgrade', Thrift.MessageType.CALL, this.seqid);
  var params = {
    b64data: b64data
  };
  var args = new enroll_service_upgrade_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_upgrade();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

enroll_serviceClient.prototype.recv_upgrade = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enroll_service_upgrade_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'upgrade failed: unknown result';
};
